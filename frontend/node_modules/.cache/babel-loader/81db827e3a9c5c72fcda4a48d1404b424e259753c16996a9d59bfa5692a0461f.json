{"ast":null,"code":"import { CanvasContext } from '../../types.js';\nimport webglMutation from './webgl.js';\nimport canvasMutation$1 from './2d.js';\nfunction canvasMutation(_a) {\n  var event = _a.event,\n    mutation = _a.mutation,\n    target = _a.target,\n    imageMap = _a.imageMap,\n    errorHandler = _a.errorHandler;\n  try {\n    var mutations = 'commands' in mutation ? mutation.commands : [mutation];\n    if ([CanvasContext.WebGL, CanvasContext.WebGL2].includes(mutation.type)) {\n      return mutations.forEach(function (command) {\n        webglMutation({\n          mutation: command,\n          type: mutation.type,\n          target: target,\n          imageMap: imageMap,\n          errorHandler: errorHandler\n        });\n      });\n    }\n    return mutations.forEach(function (command) {\n      canvasMutation$1({\n        event: event,\n        mutation: command,\n        target: target,\n        imageMap: imageMap,\n        errorHandler: errorHandler\n      });\n    });\n  } catch (error) {\n    errorHandler(mutation, error);\n  }\n}\nexport default canvasMutation;","map":{"version":3,"names":["CanvasContext","webglMutation","canvasMutation$1","canvasMutation","_a","event","mutation","target","imageMap","errorHandler","mutations","commands","WebGL","WebGL2","includes","type","forEach","command","error"],"sources":["C:/Users/PRIYAM/OneDrive/Desktop/session replay/frontend/node_modules/rrweb/es/rrweb/packages/rrweb/src/replay/canvas/index.js"],"sourcesContent":["import { CanvasContext } from '../../types.js';\nimport webglMutation from './webgl.js';\nimport canvasMutation$1 from './2d.js';\n\nfunction canvasMutation(_a) {\n    var event = _a.event, mutation = _a.mutation, target = _a.target, imageMap = _a.imageMap, errorHandler = _a.errorHandler;\n    try {\n        var mutations = 'commands' in mutation ? mutation.commands : [mutation];\n        if ([CanvasContext.WebGL, CanvasContext.WebGL2].includes(mutation.type)) {\n            return mutations.forEach(function (command) {\n                webglMutation({\n                    mutation: command,\n                    type: mutation.type,\n                    target: target,\n                    imageMap: imageMap,\n                    errorHandler: errorHandler,\n                });\n            });\n        }\n        return mutations.forEach(function (command) {\n            canvasMutation$1({\n                event: event,\n                mutation: command,\n                target: target,\n                imageMap: imageMap,\n                errorHandler: errorHandler,\n            });\n        });\n    }\n    catch (error) {\n        errorHandler(mutation, error);\n    }\n}\n\nexport default canvasMutation;\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,gBAAgB;AAC9C,OAAOC,aAAa,MAAM,YAAY;AACtC,OAAOC,gBAAgB,MAAM,SAAS;AAEtC,SAASC,cAAcA,CAACC,EAAE,EAAE;EACxB,IAAIC,KAAK,GAAGD,EAAE,CAACC,KAAK;IAAEC,QAAQ,GAAGF,EAAE,CAACE,QAAQ;IAAEC,MAAM,GAAGH,EAAE,CAACG,MAAM;IAAEC,QAAQ,GAAGJ,EAAE,CAACI,QAAQ;IAAEC,YAAY,GAAGL,EAAE,CAACK,YAAY;EACxH,IAAI;IACA,IAAIC,SAAS,GAAG,UAAU,IAAIJ,QAAQ,GAAGA,QAAQ,CAACK,QAAQ,GAAG,CAACL,QAAQ,CAAC;IACvE,IAAI,CAACN,aAAa,CAACY,KAAK,EAAEZ,aAAa,CAACa,MAAM,CAAC,CAACC,QAAQ,CAACR,QAAQ,CAACS,IAAI,CAAC,EAAE;MACrE,OAAOL,SAAS,CAACM,OAAO,CAAC,UAAUC,OAAO,EAAE;QACxChB,aAAa,CAAC;UACVK,QAAQ,EAAEW,OAAO;UACjBF,IAAI,EAAET,QAAQ,CAACS,IAAI;UACnBR,MAAM,EAAEA,MAAM;UACdC,QAAQ,EAAEA,QAAQ;UAClBC,YAAY,EAAEA;QAClB,CAAC,CAAC;MACN,CAAC,CAAC;IACN;IACA,OAAOC,SAAS,CAACM,OAAO,CAAC,UAAUC,OAAO,EAAE;MACxCf,gBAAgB,CAAC;QACbG,KAAK,EAAEA,KAAK;QACZC,QAAQ,EAAEW,OAAO;QACjBV,MAAM,EAAEA,MAAM;QACdC,QAAQ,EAAEA,QAAQ;QAClBC,YAAY,EAAEA;MAClB,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,CACD,OAAOS,KAAK,EAAE;IACVT,YAAY,CAACH,QAAQ,EAAEY,KAAK,CAAC;EACjC;AACJ;AAEA,eAAef,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}